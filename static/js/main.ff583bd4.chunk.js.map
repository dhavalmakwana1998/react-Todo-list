{"version":3,"sources":["Loader.jsx","App.js","reportWebVitals.js","index.js"],"names":["Loader","className","role","App","useState","inputData","setInputData","localStorage","getItem","JSON","parse","todo","setTodo","complete","setComplete","isEdit","setIsEdit","loading","setLoading","editTodo","setEditTodo","inputref","useRef","addTodo","trim","map","elem","id","task","toast","warning","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","allInput","Date","getTime","toString","success","error","current","focus","style","borderColor","useEffect","setTimeout","setItem","stringify","ref","type","placeholder","value","onChange","e","target","boxShadow","borderWidth","onClick","length","alert","item","editItem","find","addtoDone","newData","filter","info","removeItem","newcData","addtoDo","removeCompleteItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff583bd4.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"d-flex bg-info justify-content-center align-items-center vh-100\">\r\n      <div className=\"spinner-border text-warning\" role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import { useState, useEffect, useRef } from \"react\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Loader from \"./Loader\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst getData = () => {\r\n  let data = localStorage.getItem(\"todoData\");\r\n  // console.log(JSON.parse(data));\r\n  if (data) {\r\n    return JSON.parse(localStorage.getItem(\"todoData\"));\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\nconst getDoneData = () => {\r\n  let data = localStorage.getItem(\"todoDoneData\");\r\n  // console.log(JSON.parse(data));\r\n  if (data) {\r\n    return JSON.parse(localStorage.getItem(\"todoDoneData\"));\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n\r\nfunction App() {\r\n  const [inputData, setInputData] = useState(\"\");\r\n  const [todo, setTodo] = useState(getData());\r\n  const [complete, setComplete] = useState(getDoneData());\r\n  const [isEdit, setIsEdit] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [editTodo, setEditTodo] = useState(null);\r\n  const inputref = useRef(null);\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n    }, 1500);\r\n  }, []);\r\n\r\n  function addTodo() {\r\n    if (!inputData || !inputData.trim()) {\r\n      toast.error(\"please add input\", {\r\n        position: \"top-center\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n      inputref.current.focus();\r\n      inputref.current.style.borderColor = \"red\";\r\n      setInputData(\"\");\r\n    } else if (inputData && isEdit) {\r\n      setTodo(\r\n        todo.map((elem) => {\r\n          if (elem.id === editTodo) {\r\n            return { ...elem, task: inputData };\r\n            // console.log(...elem);\r\n          }\r\n          return elem;\r\n        })\r\n      );\r\n      toast.warning(\"Task update successfully!\", {\r\n        position: \"top-center\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n      setInputData(\"\");\r\n      setIsEdit(false);\r\n      setEditTodo(null);\r\n    } else {\r\n      const allInput = { id: new Date().getTime().toString(), task: inputData };\r\n      setTodo([...todo, allInput]);\r\n      setInputData(\"\");\r\n      toast.success(\"Task added successfully!\", {\r\n        position: \"top-center\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    }\r\n  }\r\n\r\n  function removeAll() {\r\n    setInputData(\"\");\r\n    setIsEdit(false);\r\n    if (todo.length <= 0) {\r\n      alert(\"All Read\");\r\n    } else {\r\n      setTodo([]);\r\n      setComplete([...complete, ...todo]);\r\n    }\r\n  }\r\n\r\n  function editItem(id) {\r\n    setInputData(\"\");\r\n    setIsEdit(true);\r\n    const editItem = todo.find((elem) => {\r\n      return id === elem.id;\r\n    });\r\n    setInputData(editItem.task);\r\n    setEditTodo(id);\r\n  }\r\n\r\n  function removeItem(id) {\r\n    setInputData(\"\");\r\n    setIsEdit(false);\r\n    const addtoDone = todo.find((elem) => {\r\n      return id === elem.id;\r\n    });\r\n    setComplete([...complete, addtoDone]);\r\n\r\n    const newData = todo.filter((elem) => {\r\n      return id !== elem.id;\r\n    });\r\n    setTodo(newData);\r\n    toast.info(\"Task move to complete!\", {\r\n      position: \"top-center\",\r\n      autoClose: 5000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n    });\r\n  }\r\n\r\n  function removeCompleteItem(id) {\r\n    setInputData(\"\");\r\n    setIsEdit(false);\r\n    const newcData = complete.filter((elem) => {\r\n      return elem.id !== id;\r\n    });\r\n    setComplete(newcData);\r\n\r\n    const addtoDo = complete.find((elem) => {\r\n      return elem.id === id;\r\n    });\r\n    setTodo([...todo, addtoDo]);\r\n  }\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"todoData\", JSON.stringify(todo));\r\n    localStorage.setItem(\"todoDoneData\", JSON.stringify(complete));\r\n  }, [todo, complete]);\r\n\r\n  if (loading) {\r\n    return <Loader />;\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <ToastContainer />\r\n      <div className=\"container\">\r\n        {/* <div className=\"my-4 py-2 my-alert\">\r\n          {isAlert && <Alert type={1} />}\r\n        </div> */}\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <div className=\"card todolist not-done\">\r\n              <h1>Todos</h1>\r\n              <div className=\"input-group mb-3\">\r\n                <input\r\n                  ref={inputref}\r\n                  type=\"text\"\r\n                  className=\"form-control add-todo\"\r\n                  placeholder=\"Add todo\"\r\n                  value={inputData}\r\n                  onChange={(e) => setInputData(e.target.value)}\r\n                  style={{ boxShadow: \"none\", borderWidth: \"1.5px\" }}\r\n                />\r\n                <div className=\"input-group-append\">\r\n                  <span className=\"\">\r\n                    {isEdit ? (\r\n                      <button\r\n                        className=\"btn btn-warning rounded-0\"\r\n                        onClick={addTodo}\r\n                      >\r\n                        <i className=\"fa fa-edit\"></i>\r\n                      </button>\r\n                    ) : (\r\n                      <button\r\n                        className=\"btn btn-success rounded-0\"\r\n                        onClick={addTodo}\r\n                      >\r\n                        <i className=\"fa fa-plus\"></i>\r\n                      </button>\r\n                    )}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <button onClick={removeAll} className=\"btn btn-outline-success\">\r\n                Mark all as done\r\n              </button>\r\n\r\n              <hr />\r\n              <ul id=\"sortable\" className=\"list-unstyled\">\r\n                {!todo.length ? (\r\n                  <h5 className=\"bg-warning text-center\">No data found</h5>\r\n                ) : (\r\n                  todo.map((item) => {\r\n                    return (\r\n                      <li className=\"ui-state-default my-1\" key={item.id}>\r\n                        <div className=\"font-weight-bold checkbox d-flex justify-content-between\">\r\n                          <div>{item.task}</div>\r\n                          <div>\r\n                            <i\r\n                              onClick={() => editItem(item.id)}\r\n                              className=\"mr-3 fa fa-edit text-dark p-2 rounded bg-warning fa-md\"\r\n                            ></i>\r\n                            <i\r\n                              onClick={() => removeItem(item.id)}\r\n                              className=\"fa fa-trash text-light p-2 rounded bg-danger fa-md\"\r\n                            ></i>\r\n                          </div>\r\n                        </div>\r\n                      </li>\r\n                    );\r\n                  })\r\n                )}\r\n              </ul>\r\n              <div className=\"todo-footer\">\r\n                <strong>\r\n                  <span className=\"count-todos\">{todo.length} </span>\r\n                </strong>\r\n                Items Left\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"col-md-6 p-4 my-2\">\r\n            <div className=\"card p-4 stodolist\">\r\n              <h1>Already Done</h1>\r\n              <ul id=\"done-items\" className=\"list-unstyled\">\r\n                {!complete.length ? (\r\n                  <h5 className=\"bg-warning text-center\">No data found</h5>\r\n                ) : (\r\n                  complete.map((item) => {\r\n                    return (\r\n                      <li\r\n                        className=\"d-flex justify-content-between\"\r\n                        key={item.id}\r\n                      >\r\n                        {item.task}\r\n                        <button className=\"btn btn-outline-success btn-sm py-0 my-0\">\r\n                          <i\r\n                            className=\"fa fa-remove\"\r\n                            onClick={() => removeCompleteItem(item.id)}\r\n                          ></i>\r\n                        </button>\r\n                      </li>\r\n                    );\r\n                  })\r\n                )}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}